--- ./src/x86/win32.S
+++ ./src/x86/win32.S
@@ -137,6 +137,7 @@
         dd offset ca_retint64       ;; FFI_TYPE_SINT64
         dd offset ca_epilogue       ;; FFI_TYPE_STRUCT
         dd offset ca_retint         ;; FFI_TYPE_POINTER
+        dd offset ca_epilogue       ;; FFI_TYPE_COMPLEX
         dd offset ca_retstruct1b    ;; FFI_TYPE_SMALL_STRUCT_1B
         dd offset ca_retstruct2b    ;; FFI_TYPE_SMALL_STRUCT_2B
         dd offset ca_retint         ;; FFI_TYPE_SMALL_STRUCT_4B
@@ -268,6 +269,7 @@
         dd offset cs_retint64       ;; FFI_TYPE_SINT64
         dd offset cs_retstruct      ;; FFI_TYPE_STRUCT
         dd offset cs_retint         ;; FFI_TYPE_POINTER
+        dd offset cs_epilogue       ;; FFI_TYPE_COMPLEX
         dd offset cs_retsint8       ;; FFI_TYPE_SMALL_STRUCT_1B
         dd offset cs_retsint16      ;; FFI_TYPE_SMALL_STRUCT_2B
         dd offset cs_retint         ;; FFI_TYPE_SMALL_STRUCT_4B
@@ -312,13 +314,12 @@
 
 cs_retstruct:
         ;; Caller expects us to pop struct return value pointer hidden arg.
-        ;; Epilogue code is autogenerated.
-        ret	4
+        jmp   cs_epilogue
 
 cs_retmsstruct:
         ;; Caller expects us to return a pointer to the real return value.
         mov   eax, ecx
-        ;; Caller doesn't expects us to pop struct return value pointer hidden arg.
+        ;; Caller will pop struct return value pointer hidden arg.
         jmp   cs_epilogue
 
 cs_epilogue:
@@ -377,6 +378,7 @@
         dd offset cr_retint64       ;; FFI_TYPE_SINT64
         dd offset cr_epilogue       ;; FFI_TYPE_STRUCT
         dd offset cr_retint         ;; FFI_TYPE_POINTER
+        dd offset cr_epilogue       ;; FFI_TYPE_COMPLEX
         dd offset cr_retsint8       ;; FFI_TYPE_SMALL_STRUCT_1B
         dd offset cr_retsint16      ;; FFI_TYPE_SMALL_STRUCT_2B
         dd offset cr_retint         ;; FFI_TYPE_SMALL_STRUCT_4B
@@ -427,7 +429,7 @@
 #endif /* !FFI_NO_RAW_API */
 
 ffi_closure_STDCALL PROC NEAR FORCEFRAME
-        mov  eax, [esp] ;; the ffi_closure ctx passed by the trampoline.
+        mov  eax, [esp+4] ;; the ffi_closure ctx passed by the trampoline.
 
         sub  esp, 40
         lea  edx, [ebp - 24]
@@ -463,9 +465,11 @@
         dd offset cd_retint64       ;; FFI_TYPE_SINT64
         dd offset cd_epilogue       ;; FFI_TYPE_STRUCT
         dd offset cd_retint         ;; FFI_TYPE_POINTER
+        dd offset cd_epilogue       ;; FFI_TYPE_COMPLEX
         dd offset cd_retsint8       ;; FFI_TYPE_SMALL_STRUCT_1B
         dd offset cd_retsint16      ;; FFI_TYPE_SMALL_STRUCT_2B
         dd offset cd_retint         ;; FFI_TYPE_SMALL_STRUCT_4B
+        dd offset cd_epilogue       ;; FFI_TYPE_MS_STRUCT
 
 cd_retuint8:
         movzx eax, BYTE PTR [ecx]
@@ -624,6 +628,7 @@
         .long	.Lretint64-.Lstore_table	/* FFI_TYPE_SINT64 */
         .long	.Lretstruct-.Lstore_table	/* FFI_TYPE_STRUCT */
         .long	.Lretint-.Lstore_table		/* FFI_TYPE_POINTER */
+	.long   0                               /* FFI_TYPE_COMPLEX */
         .long	.Lretstruct1b-.Lstore_table	/* FFI_TYPE_SMALL_STRUCT_1B */
         .long	.Lretstruct2b-.Lstore_table	/* FFI_TYPE_SMALL_STRUCT_2B */
         .long	.Lretstruct4b-.Lstore_table	/* FFI_TYPE_SMALL_STRUCT_4B */
@@ -807,6 +812,7 @@
         .long	.Lcls_retllong-.Lcls_store_table	/* FFI_TYPE_SINT64 */
         .long	.Lcls_retstruct-.Lcls_store_table	/* FFI_TYPE_STRUCT */
         .long	.Lcls_retint-.Lcls_store_table		/* FFI_TYPE_POINTER */
+        .long	0                       		/* FFI_TYPE_COMPLEX */
         .long	.Lcls_retstruct1-.Lcls_store_table	/* FFI_TYPE_SMALL_STRUCT_1B */
         .long	.Lcls_retstruct2-.Lcls_store_table	/* FFI_TYPE_SMALL_STRUCT_2B */
         .long	.Lcls_retstruct4-.Lcls_store_table	/* FFI_TYPE_SMALL_STRUCT_4B */
@@ -872,14 +878,12 @@
 
 .Lcls_retstruct:
         # Caller expects us to pop struct return value pointer hidden arg.
-        movl	%ebp, %esp
-        popl	%ebp
-        ret	$0x4
+	jmp     .Lcls_epilogue
 
 .Lcls_retmsstruct:
         # Caller expects us to return a pointer to the real return value.
         mov	%ecx, %eax
-        # Caller doesn't expects us to pop struct return value pointer hidden arg.
+        # Caller will pop struct return value pointer hidden arg.
         jmp	.Lcls_epilogue
 
 .Lcls_noretval:
@@ -962,10 +966,11 @@
         .long	.Lrcls_retllong-.Lrcls_store_table	/* FFI_TYPE_SINT64 */
         .long	.Lrcls_retstruct-.Lrcls_store_table	/* FFI_TYPE_STRUCT */
         .long	.Lrcls_retint-.Lrcls_store_table	/* FFI_TYPE_POINTER */
+        .long	0                               	/* FFI_TYPE_COMPLEX */
         .long	.Lrcls_retstruct1-.Lrcls_store_table	/* FFI_TYPE_SMALL_STRUCT_1B */
         .long	.Lrcls_retstruct2-.Lrcls_store_table	/* FFI_TYPE_SMALL_STRUCT_2B */
         .long	.Lrcls_retstruct4-.Lrcls_store_table	/* FFI_TYPE_SMALL_STRUCT_4B */
-        .long	.Lrcls_retstruct-.Lrcls_store_table	/* FFI_TYPE_MS_STRUCT */
+        .long	.Lrcls_retmsstruct-.Lrcls_store_table	/* FFI_TYPE_MS_STRUCT */
 1:
         shl	$2, %eax
         add	(%esp),%eax
@@ -1024,6 +1029,9 @@
         movl	-24(%ebp), %eax
         jmp	.Lrcls_epilogue
 
+.Lrcls_retmsstruct:
+        # FIXME
+
 .Lrcls_retstruct:
         # Nothing to do!
 
@@ -1097,9 +1105,11 @@
         .long	.Lscls_retllong-.Lscls_store_table	/* FFI_TYPE_SINT64 */
         .long	.Lscls_retstruct-.Lscls_store_table	/* FFI_TYPE_STRUCT */
         .long	.Lscls_retint-.Lscls_store_table	/* FFI_TYPE_POINTER */
+        .long	0                               	/* FFI_TYPE_COMPLEX */
         .long	.Lscls_retstruct1-.Lscls_store_table	/* FFI_TYPE_SMALL_STRUCT_1B */
         .long	.Lscls_retstruct2-.Lscls_store_table	/* FFI_TYPE_SMALL_STRUCT_2B */
         .long	.Lscls_retstruct4-.Lscls_store_table	/* FFI_TYPE_SMALL_STRUCT_4B */
+        .long	.Lscls_retmsstruct-.Lscls_store_table	/* FFI_TYPE_MS_STRUCT */
 1:
         shl	$2, %eax
         add	(%esp),%eax
@@ -1158,6 +1168,9 @@
         movl	(%ecx), %eax
         jmp	.Lscls_epilogue
 
+.Lscls_retmsstruct:
+        # FIXME
+
 .Lscls_retstruct:
         # Nothing to do!
 
